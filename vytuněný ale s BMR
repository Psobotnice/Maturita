import tkinter as tk
from tkinter import PhotoImage, ttk
from PIL import Image, ImageTk  # Import Pillow for image-based emojis

def start_app():
    root = tk.Tk()
    root.title("Fitness Aplikace")
    root.geometry("600x500")
    root.resizable(False, False)
    root.configure(bg="#e0e0e0")

    # Main frame for UI layout
    main_frame = tk.Frame(root, bg="#f0f0f0", padx=20, pady=20)
    main_frame.pack(expand=True, fill="both")

    # Add logo
    try:
        logo = PhotoImage(file="appka/logo.png")
        logo_label = tk.Label(main_frame, image=logo, bg="#f0f0f0")
        logo_label.pack(pady=10)
    except Exception as e:
        print("Chyba p≈ôi naƒç√≠t√°n√≠ loga:", e)

    # Title with color emoji font
    tk.Label(main_frame, text="üéâ V√≠tejte ve Fitness aplikaci!", font=("Segoe UI Emoji", 18, "bold"), bg="#f0f0f0", fg="#333").pack(pady=10)

    start_button = tk.Button(main_frame, text="START", font=("Arial", 14, "bold"), bg="#4caf50", fg="white", command=lambda: open_form(root))
    start_button.pack(pady=20)

    root.mainloop()

def show_error(message):
    """ Displays an error message window """
    error_window = tk.Toplevel()
    error_window.title("Chyba")
    error_window.geometry("400x200")
    error_window.configure(bg="#f8d7da")

    # Emoji title
    tk.Label(error_window, text="‚ö† Chyba!", font=("Segoe UI Emoji", 16, "bold"), bg="#f8d7da", fg="#721c24").pack(pady=10)
    tk.Label(error_window, text=message, font=("Arial", 12), bg="#f8d7da", fg="#721c24").pack(pady=10)
    
    tk.Button(error_window, text="OK", font=("Arial", 12), bg="red", fg="white", command=error_window.destroy).pack(pady=10)

def open_form(root):
    """ Opens the user data entry form """
    for widget in root.winfo_children():
        widget.destroy()

    form_frame = tk.Frame(root, bg="#f0f0f0", padx=20, pady=20)
    form_frame.pack(expand=True, fill="both")

    tk.Label(form_frame, text="üìù Zadejte sv√© √∫daje", font=("Segoe UI Emoji", 16, "bold"), bg="#f0f0f0").pack(pady=10)

    entries = {}
    fields = [("Jm√©no", "text"), ("Vƒõk", "int"), ("Pohlav√≠ (M/≈Ω)", "gender"), ("V√°ha (kg)", "float"), ("V√Ω≈°ka (cm)", "float")]

    for label, dtype in fields:
        tk.Label(form_frame, text=label + ":", font=("Arial", 12), bg="#f0f0f0", anchor="w").pack(fill="x", padx=10)
        entry = ttk.Entry(form_frame, font=("Arial", 12))
        entry.pack(fill="x", padx=10, pady=5)
        entries[label] = (entry, dtype)

    def submit_data():
        """ Validates and processes user input """
        data = {}
        for label, (entry, dtype) in entries.items():
            value = entry.get().strip()

            if not value:
                show_error(f"Pole '{label}' nesm√≠ b√Ωt pr√°zdn√©!")
                return

            if dtype == "text" and not value.isalpha():
                show_error(f"Pole '{label}' sm√≠ obsahovat pouze p√≠smena!")
                return
            if dtype == "int" and not value.isdigit():
                show_error(f"Pole '{label}' mus√≠ obsahovat pouze cel√° ƒç√≠sla!")
                return
            if dtype == "gender" and value not in ["M", "≈Ω"]:
                show_error("Pohlav√≠ mus√≠ b√Ωt 'M' nebo '≈Ω'!")
                return
            if dtype == "float":
                try:
                    value = float(value.replace(",", "."))
                except ValueError:
                    show_error(f"Pole '{label}' mus√≠ b√Ωt ƒç√≠slo!")
                    return

            data[label] = value

        weight, height, age = data["V√°ha (kg)"], data["V√Ω≈°ka (cm)"] / 100, int(data["Vƒõk"])
        bmi = weight / (height ** 2)
        bmr = 10 * weight + 6.25 * (height * 100) - 5 * age + (5 if data["Pohlav√≠ (M/≈Ω)"] == "M" else -161)

        for widget in root.winfo_children():
            widget.destroy()

        ask_weight_change(root, data, bmr)

    submit_button = tk.Button(form_frame, text="Pokraƒçovat", font=("Arial", 14), bg="#4caf50", fg="white", command=submit_data)
    submit_button.pack(pady=20)

def ask_weight_change(root, data, bmr):
    """ Asks the user about weight change and estimates calorie intake """
    for widget in root.winfo_children():
        widget.destroy()

    frame = tk.Frame(root, bg="#f0f0f0", padx=20, pady=20)
    frame.pack(expand=True, fill="both")

    tk.Label(frame, text="Jak se zmƒõnila va≈°e v√°ha za posledn√≠ mƒõs√≠c?", font=("Arial", 12), bg="#f0f0f0").pack(anchor="w", padx=20)

    weight_change = tk.StringVar(value="Stejnƒõ")
    options = [("Zhubl/a", "loss"), ("P≈ôibral/a", "gain"), ("Z≈Østal/a stejnƒõ", "same")]

    for text, value in options:
        tk.Radiobutton(frame, text=text, variable=weight_change, value=value, bg="#f0f0f0").pack(anchor="w", padx=40)

    def next_step():
        change = weight_change.get()
        if change == "same":
            estimated_calories = bmr
        else:
            tk.Label(frame, text="Kolik kg jste zmƒõnil/a za posledn√≠ mƒõs√≠c?", font=("Arial", 12), bg="#f0f0f0").pack(anchor="w", padx=20)
            weight_entry = ttk.Entry(frame, font=("Arial", 12))
            weight_entry.pack(fill="x", padx=20, pady=5)

            def calculate_calories():
                try:
                    weight_diff = float(weight_entry.get().replace(",", "."))
                    if change == "loss":
                        estimated_calories = bmr - (weight_diff * 7700 / 30)
                    else:
                        estimated_calories = bmr + (weight_diff * 7700 / 30)

                    show_goal_selection(root, estimated_calories)
                except ValueError:
                    show_error("Zadejte platnou hodnotu pro v√°hov√Ω rozd√≠l!")

            tk.Button(frame, text="Potvrdit", font=("Arial", 12), bg="#4caf50", fg="white", command=calculate_calories).pack(pady=10)
            return
        
        show_goal_selection(root, estimated_calories)

    tk.Button(frame, text="Pokraƒçovat", font=("Arial", 14), bg="#4caf50", fg="white", command=next_step).pack(pady=20)

def show_goal_selection(root, estimated_calories):
    """ Uk√°zat jejich denn√≠ p≈ô√≠jem """
    for widget in root.winfo_children():
        widget.destroy()

    frame = tk.Frame(root, bg="#f0f0f0", padx=20, pady=20)
    frame.pack(expand=True, fill="both")

    tk.Label(frame, text=f"Va≈°e odhadovan√° denn√≠ kalorick√° pot≈ôeba: {estimated_calories:.0f} kcal", font=("Arial", 12), bg="#f0f0f0").pack(pady=10)

def show_goal_selection(root, estimated_calories):
    """Uk√°≈æe mo≈ænosti c√≠le a reaguje na v√Ωbƒõr u≈æivatele"""
    for widget in root.winfo_children():
        widget.destroy()

    frame = tk.Frame(root, bg="#f0f0f0", padx=20, pady=20)
    frame.pack(expand=True, fill="both")

    tk.Label(frame, text=f"Va≈°e odhadovan√° denn√≠ kalorick√° pot≈ôeba: {estimated_calories:.0f} kcal", 
             font=("Arial", 12), bg="#f0f0f0").pack(pady=10)

    tk.Label(frame, text="Jak√Ω je v√°≈° c√≠l?", font=("Arial", 12), bg="#f0f0f0").pack(pady=10)

    # Funkce pro zobrazen√≠ formul√°≈ôe pro c√≠l hubnut√≠ nebo p≈ôib√≠r√°n√≠
    def ask_weight_goal(goal_type):
        """ Zept√° se, kolik kg chce u≈æivatel zhubnout/p≈ôibrat a za jak dlouho """
        for widget in frame.winfo_children():
            widget.destroy()

        tk.Label(frame, text=f"Kolik kg chcete {'zhubnout' if goal_type == 'loss' else 'p≈ôibrat'}?", 
                 font=("Arial", 12), bg="#f0f0f0").pack(pady=5)
        weight_entry = ttk.Entry(frame, font=("Arial", 12))
        weight_entry.pack(fill="x", padx=20, pady=5)

        tk.Label(frame, text="Za kolik t√Ωdn≈Ø chcete dos√°hnout c√≠le?", font=("Arial", 12), bg="#f0f0f0").pack(pady=5)
        time_entry = ttk.Entry(frame, font=("Arial", 12))
        time_entry.pack(fill="x", padx=20, pady=5)

        def calculate_goal():
            """ Vypoƒç√≠t√° doporuƒçen√Ω kalorick√Ω p≈ô√≠jem na z√°kladƒõ c√≠le """
            try:
                weight_diff = float(weight_entry.get().replace(",", "."))
                weeks = int(time_entry.get())

                if weeks < 4:  # Minim√°ln√≠ doporuƒçen√° doba pro zdrav√© hubnut√≠/p≈ôib√≠r√°n√≠
                    show_error("Doporuƒçujeme del≈°√≠ ƒçasov√Ω √∫sek pro zdrav√© tempo zmƒõny v√°hy.")
                    return

                calorie_adjustment = (weight_diff * 7700) / (weeks * 7)  # Denn√≠ kalorick√Ω rozd√≠l
                new_calories = estimated_calories - calorie_adjustment if goal_type == "loss" else estimated_calories + calorie_adjustment

                show_final_calories(root, new_calories, goal_type)
            except ValueError:
                show_error("Zadejte platn√© ƒç√≠slo pro v√°hu a poƒçet t√Ωdn≈Ø!")

        tk.Button(frame, text="Potvrdit", font=("Arial", 12), bg="#4caf50", fg="white", command=calculate_goal).pack(pady=10)

    # Tlaƒç√≠tka pro v√Ωbƒõr c√≠le
    tk.Button(frame, text="Chci zhubnout", font=("Arial", 14), bg="blue", fg="white", 
              command=lambda: ask_weight_goal("loss")).pack(pady=10)
    
    tk.Button(frame, text="Chci p≈ôibrat", font=("Arial", 14), bg="red", fg="white", 
              command=lambda: ask_weight_goal("gain")).pack(pady=10)
    
    tk.Button(frame, text="Chci z≈Østat tak jsem", font=("Arial", 14), bg="green", fg="white", 
              command=lambda: show_final_calories(root, estimated_calories, "maintain")).pack(pady=10)

def show_final_calories(root, new_calories, goal_type):
    """Zobraz√≠ fin√°ln√≠ doporuƒçen√Ω kalorick√Ω p≈ô√≠jem na z√°kladƒõ c√≠le u≈æivatele"""
    for widget in root.winfo_children():
        widget.destroy()

    frame = tk.Frame(root, bg="#f0f0f0", padx=20, pady=20)
    frame.pack(expand=True, fill="both")

    goal_text = {
        "loss": "Doporuƒçen√Ω kalorick√Ω p≈ô√≠jem pro hubnut√≠:",
        "gain": "Doporuƒçen√Ω kalorick√Ω p≈ô√≠jem pro p≈ôib√≠r√°n√≠:",
        "maintain": "Pro udr≈æen√≠ v√°hy byste mƒõli dennƒõ p≈ôijmout:"
    }

    tk.Label(frame, text=goal_text[goal_type], font=("Arial", 12), bg="#f0f0f0").pack(pady=10)
    tk.Label(frame, text=f"{new_calories:.0f} kcal", font=("Arial", 16, "bold"), bg="#f0f0f0", fg="black").pack(pady=10)

    tk.Button(frame, text="Dokonƒçit", font=("Arial", 14), bg="#4caf50", fg="white", command=root.quit).pack(pady=20)


if __name__ == "__main__":
    start_app()
